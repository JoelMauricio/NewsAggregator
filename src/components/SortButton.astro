---
// src/components/SortDropdown.astro
interface SortOption {
  label: string;
  key: string;
  icon: string;
  description: string;
}

const sortOptions: SortOption[] = [
  {
    label: 'Publication Date',
    key: 'date',
    icon: `<svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>`,
    description: 'Sort from newest to oldest'
  },
  {
    label: 'Author',
    key: 'author',
    icon: `<svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>`,
    description: 'Sort alphabetically by author name'
  },
  {
    label: 'Source',
    key: 'source',
    icon: `<svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9.5a2 2 0 00-2-2h-2" />
          </svg>`,
    description: 'Sort alphabetically by source name'
  },
  {
    label: 'Headline',
    key: 'headline',
    icon: `<svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
          </svg>`,
    description: 'Sort alphabetically by headline'
  }
];
---

<div class="relative" id="sort-dropdown">
  <!-- Sort Button -->
  <button
    id="sort-trigger"
    class="bg-white border rounded-md shadow-sm px-3 py-2 flex items-center gap-2 hover:bg-gray-50"
    aria-label="Sort options"
  >
    <div class="flex items-center gap-2" id="selected-sort">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12" />
      </svg>
      <span>Sort</span>
    </div>
  </button>

  <!-- Sort Direction Button -->
  <button
    id="direction-trigger"
    class="absolute right-0 top-0 h-full px-2 flex items-center border-l bg-white rounded-r-md hover:bg-gray-50"
    aria-label="Toggle sort direction"
  >
    <svg id="direction-icon" xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4" />
    </svg>
  </button>

  <!-- Dropdown Menu -->
  <div
    id="sort-menu"
    class="hidden absolute z-50 w-[220px] mt-1 bg-white border rounded-md shadow-lg"
  >
    {sortOptions.map((option) => (
      <button
        class="w-full px-4 py-2 text-left hover:bg-gray-50 flex items-center gap-2"
        data-sort-key={option.key}
      >
        <Fragment set:html={option.icon} />
        <div class="flex flex-col">
          <span class="font-medium">{option.label}</span>
          <span class="text-xs text-gray-500">{option.description}</span>
        </div>
      </button>
    ))}
  </div>
</div>

<script>
  // Get DOM elements
  const dropdown = document.getElementById('sort-dropdown');
  const trigger = document.getElementById('sort-trigger');
  const menu = document.getElementById('sort-menu');
  const selectedSort = document.getElementById('selected-sort');
  const directionTrigger = document.getElementById('direction-trigger');
  const directionIcon = document.getElementById('direction-icon');

  let isAscending = true;

  // Toggle dropdown
  trigger?.addEventListener('click', (event) => {
    event.stopPropagation();
    menu?.classList.toggle('hidden');
  });

  // Toggle sort direction
  directionTrigger?.addEventListener('click', (event) => {
    event.stopPropagation();
    isAscending = !isAscending;

    // Update direction icon
    if (directionIcon) {
      directionIcon.innerHTML = isAscending
        ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4" />'
        : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4 4m4-4l4 4" />';
    }

    // Dispatch sort direction change event
    dropdown?.dispatchEvent(new CustomEvent('sortDirectionChange', {
      detail: { isAscending }
    }));
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (event) => {
    if (!dropdown?.contains(event.target as Node)) {
      menu?.classList.add('hidden');
    }
  });

  // Handle sort selection
  menu?.addEventListener('click', (event) => {
    const button = (event.target as Element).closest('button');
    if (!button) return;

    const sortKey = button.dataset.sortKey;
    const icon = button.querySelector('svg')?.outerHTML;
    const label = button.querySelector('.font-medium')?.textContent;

    if (selectedSort && icon && label) {
      selectedSort.innerHTML = `${icon}<span>${label}</span>`;
      menu.classList.add('hidden');

      // Dispatch sort change event
      dropdown?.dispatchEvent(new CustomEvent('sortChange', {
        detail: {
          key: sortKey,
          isAscending
        }
      }));
    }
  });
</script>

<style>
  #sort-dropdown {
    min-width: 180px;
  }

  #sort-trigger {
    width: 100%;
    padding-right: 2.5rem;
  }

  #sort-menu {
    transition: opacity 0.1s ease-in-out;
  }

  #sort-menu:not(.hidden) {
    animation: slideDown 0.1s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
