---
// src/components/ArticleStateDropdown.astro
interface State {
  label: string;
  icon: string;
  description: string;
  color: string;
}

const states: State[] = [
  {
    label: 'Unread',
    icon: `<svg class="w-5 h-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>`,
    description: 'New article you haven\'t read yet',
    color: 'text-blue-600'
  },
  {
    label: 'Read',
    icon: `<svg class="w-5 h-5 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>`,
    description: 'Article you\'ve already read',
    color: 'text-green-600'
  },
  {
    label: 'Saved for Later',
    icon: `<svg class="w-5 h-5 text-purple-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
          </svg>`,
    description: 'Bookmarked to read later',
    color: 'text-purple-600'
  }
];
---

<div class="relative" id="article-state-dropdown">
  <!-- Dropdown Button -->
  <button
    id="dropdown-trigger"
    class="w-[200px] px-4 py-2 text-left bg-white border rounded-md shadow-sm flex items-center justify-between hover:bg-gray-50"
  >
    <div class="flex items-center gap-2" id="selected-state">
      <Fragment set:html={states[0].icon} />
      <span>{states[0].label}</span>
    </div>
    <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 opacity-50" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>

  <!-- Dropdown Menu -->
  <div
    id="dropdown-menu"
    class="hidden absolute z-50 w-[200px] mt-1 bg-white border rounded-md shadow-lg"
  >
    {states.map((state) => (
      <button
        class="w-full px-4 py-2 text-left hover:bg-gray-50 flex items-center gap-2"
        data-state={state.label}
      >
        <Fragment set:html={state.icon} />
        <div class="flex flex-col">
          <span class="font-medium">{state.label}</span>
          <span class="text-xs text-gray-500">{state.description}</span>
        </div>
      </button>
    ))}
  </div>
</div>

<script>
  // Get DOM elements
  const dropdown = document.getElementById('article-state-dropdown');
  const trigger = document.getElementById('dropdown-trigger');
  const menu = document.getElementById('dropdown-menu');
  const selectedState = document.getElementById('selected-state');

  // Toggle dropdown
  trigger?.addEventListener('click', () => {
    menu?.classList.toggle('hidden');
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (event) => {
    if (!dropdown?.contains(event.target as Node)) {
      menu?.classList.add('hidden');
    }
  });

  // Handle state selection
  menu?.addEventListener('click', (event) => {
    const button = (event.target as Element).closest('button');
    if (!button) return;

    const stateName = button.dataset.state;
    const stateIcon = button.querySelector('svg')?.outerHTML;

    if (selectedState && stateIcon && stateName) {
      selectedState.innerHTML = `${stateIcon}<span>${stateName}</span>`;
      menu.classList.add('hidden');
    }
  });
</script>

<style>
  /* Optional: Add transition for smooth show/hide */
  #dropdown-menu {
    transition: opacity 0.1s ease-in-out;
  }

  #dropdown-menu:not(.hidden) {
    animation: slideDown 0.1s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
